pipeline{
  agent {
    kubernetes {
      label 'mavenPod-StudentProfileEmailApi'
      cloud 'openshift'
      defaultContainer 'jnlp'
      serviceAccount 'jenkins'
      yaml """
        kind: Pod
        metadata:
          name: jenkins-slave
        spec:
          containers:
          - name: jnlp
            image: registry.access.redhat.com/openshift3/jenkins-agent-maven-35-rhel7
            privileged: false
            alwaysPullImage: false
            workingDir: /tmp
            ttyEnabled: false
            resourceRequestCpu: 3
            resourceRequestMemory: 2Gi
            resourceLimitCpu: 3
            resourceLimitMemory: 2Gi
            env:
            - name: SONARQUBE_HOSTNAME
              valueFrom:
                secretKeyRef:
                  name: 'student-profile-email-api-secrets'
                  key: sonarqube-host
            - name: SONARQUBE_TOKEN
              valueFrom:
                secretKeyRef:
                  name: 'student-profile-email-api-secrets'
                  key: sonarqube-token
            - name: CHES_CLIENT_ID
              valueFrom:
                configMapKeyRef:
                  name: 'student-profile-email-api-test-config-map'
                  key: CHES_CLIENT_ID
            - name: CHES_CLIENT_SECRET
              valueFrom:
                configMapKeyRef:
                  name: 'student-profile-email-api-test-config-map'
                  key: CHES_CLIENT_SECRET
            - name: CHES_TOKEN_URL
              valueFrom:
                configMapKeyRef:
                  name: 'student-profile-email-api-test-config-map'
                  key: CHES_TOKEN_URL
            - name: CHES_ENDPOINT_URL
              valueFrom:
                configMapKeyRef:
                  name: 'student-profile-email-api-test-config-map'
                  key: CHES_ENDPOINT_URL
            - name: EMAIL_TEMPLATE_COMPLETED_REQUEST
              valueFrom:
                configMapKeyRef:
                  name: 'student-profile-email-api-test-config-map'
                  key: EMAIL_TEMPLATE_COMPLETED_REQUEST
            - name: EMAIL_TEMPLATE_REJECTED_REQUEST
              valueFrom:
                configMapKeyRef:
                  name: 'student-profile-email-api-test-config-map'
                  key: EMAIL_TEMPLATE_REJECTED_REQUEST
            - name: EMAIL_TEMPLATE_ADDITIONAL_INFO
              valueFrom:
                configMapKeyRef:
                  name: 'student-profile-email-api-test-config-map'
                  key: EMAIL_TEMPLATE_ADDITIONAL_INFO
            - name: SPRING_SECURITY_LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: 'student-profile-email-api-test-config-map'
                  key: SPRING_SECURITY_LOG_LEVEL
            - name: SPRING_WEB_LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: 'student-profile-email-api-test-config-map'
                  key: SPRING_WEB_LOG_LEVEL
            - name: APP_LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: 'student-profile-email-api-test-config-map'
                  key: APP_LOG_LEVEL
            - name: SPRING_BOOT_AUTOCONFIG_LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: 'student-profile-email-api-test-config-map'
                  key: SPRING_BOOT_AUTOCONFIG_LOG_LEVEL
            - name: SOAM_PUBLIC_KEY
              valueFrom:
                configMapKeyRef:
                  name: 'student-profile-email-api-test-config-map'
                  key: SOAM_PUBLIC_KEY
            volumeMounts:
            - mountPath: '/home/jenkins/.m2'
              name: pvc
          volumes:
          - name: pvc
            persistentVolumeClaim:
              claimName: 'maven-slave-pvc'      
      """
    }
  }

    environment{
      TOOLS = 'c2mvws-tools'
      DEV = 'c2mvws-dev'
      TEST = 'c2mvws-test'
      PROD = 'c2mvws-prod'

      REPO_NAME = 'educ-student-profile-email-api'
      OWNER = 'bcgov'
      JOB_NAME = 'master'
      TAG = 'dev'

      APP_NAME = 'student-profile-email-api'
      APP_DOMAIN = 'pathfinder.gov.bc.ca'

      SOURCE_REPO_RAW = 'https://github.com/${OWNER}/${REPO_NAME}/master'
      SOURCE_REPO_REF = 'master'
      SOURCE_REPO_URL = 'https://github.com/${OWNER}/${REPO_NAME}.git'

      TOOLS_HOST_ROUTE = "${APP_NAME}-${TOOLS}.${APP_DOMAIN}"
      DEV_HOST_ROUTE = "${APP_NAME}-${DEV}.${APP_DOMAIN}"
      TEST_HOST_ROUTE = "${APP_NAME}-${TEST}.${APP_DOMAIN}"
      PROD_HOST_ROUTE = "${APP_NAME}-${PROD}.${APP_DOMAIN}"
  }
  stages{
    stage('Unit Tests') {
      steps {
        script {
          def pom = readMavenPom file: 'api/pom.xml'
          VERSION = pom.version

          //Env variable is to fix issue where special characters in password were not being escaped properly
          def command = $//bin/bash -c "mvn -f ./api/pom.xml test"/$
          sh """
            set +x
            $command
          """
        }
      }
    }
    stage('Build App') {
      steps {
        sh '/bin/bash -c "mvn -f ./api/pom.xml -Dmaven.test.skip=true package"'
      }
    }
    stage('Create Image Builder') {
      when {
        expression {
          openshift.withCluster() {
            return !openshift.selector("bc", "${REPO_NAME}-${JOB_NAME}").exists();
          }
        }
      }
      steps {
        script {
          openshift.withCluster() {
            openshift.newBuild("--name=${REPO_NAME}-${JOB_NAME}", "--image-stream=redhat-openjdk18-openshift:1.1", "--binary")
          }
        }
      }
    }
    stage('Build Image') {
      steps {
        script {
          openshift.withCluster() {
            openshift.selector("bc", "${REPO_NAME}-${JOB_NAME}").startBuild("--from-file=./api/target/student-profile-email-api-${VERSION}.jar", "--wait")
          }
        }
      }
      post {
        success {
          echo 'Cleanup BuildConfigs'
          script {
              openshift.withCluster() {
                openshift.withProject(TOOLS) {
                  def bcApi = openshift.selector('bc', "${REPO_NAME}-${JOB_NAME}")

                  if(bcApi.exists()) {
                      echo "Removing BuildConfig ${REPO_NAME}-${JOB_NAME}"
                      bcApi.delete()
                  }
                }
              }
            }
        }
        failure {
          echo 'Build stage failed'
        }
      }
    }
	stage('Promote to DEV') {
      steps{
        deployStage('Dev', DEV, DEV_HOST_ROUTE, 'dev')
      }
      post{
        success{
          echo 'Deployment to Dev was successful'
        }
        failure{
          echo 'Deployment to Dev failed'
        }
      }
    }
    stage('Report to SonarQube') {
        steps {
            script{
                dir('api'){
                    sh '/bin/bash -c "mvn sonar:sonar -Dsonar.host.url=${SONARQUBE_HOSTNAME} -Dsonar.login=${SONARQUBE_TOKEN}"'
                }
            }
        }
    }
  }
}

def deployStage(String stageEnv, String projectEnv, String hostRouteEnv, String tag) {

  if (!stageEnv.equalsIgnoreCase('Dev')) {
    input("Deploy to ${projectEnv}?")
  }

  openshift.withCluster() {
    openshift.withProject(projectEnv) {
      echo "Tagging image"
      openshift.tag("${TOOLS}/${REPO_NAME}-${JOB_NAME}:latest", "${REPO_NAME}-${JOB_NAME}:${tag}")
      def dcTemplate = openshift.process('-f',
        'tools/openshift/api.dc.yaml',
        "REPO_NAME=${REPO_NAME}",
        "JOB_NAME=${JOB_NAME}",
        "NAMESPACE=${projectEnv}",
        "APP_NAME=${APP_NAME}",
        "HOST_ROUTE=${hostRouteEnv}",
        "TAG=${tag}"
      )

      echo "Applying Deployment ${REPO_NAME}"
      def dc = openshift.apply(dcTemplate).narrow('dc')

      echo "Waiting for deployment to roll out"
      // Wait for deployments to roll out
      timeout(10) {
        dc.rollout().status('--watch=true')
      }
    }
  }
}
